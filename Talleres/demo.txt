Definición de las funciones relevantes:

map :: (a -> b) -> [a] -> [b]
map f [] = []                                           {M0}
map f (x : xs) = f x : map f xs                         {M1}

filter :: (a -> Bool) -> [a] -> [a]
filter p [] = []                                        {F0}
filter p (x : xs) = if p x                              {F1}
                        then x : filter p xs
                        else filter p xs

elem  :: Eq a => a -> [a] -> Bool
elem e [] = False                                       {E0}
elem e (x:xs) = (e==x) || elem e xs                     {E1}

objetos_en :: Universo -> [Objeto]
objetos_en = map objeto_de . filter es_un_objeto        {OBJETOS_EN}

objeto_de :: Either Personaje Objeto -> Objeto
objeto_de (Right o) = o                                 {OBJETO_DE}

es_un_objeto :: Either Personaje Objeto -> Bool
es_un_objeto (Left p) = False                           {ES_UN_OBJETO_F}
es_un_objeto (Right o) = True                           {ES_UN_OBJETO_T}

--

Teorema de demostrar:
∀ u :: Universo . ∀ o :: Objeto . elem o (objetos_en u) ⇒ elem (Right o) u

Nota: Universo = [Either Personaje Objeto]

Demostración:

---------------------------------------------------------------
Por inducción estructural sobre la lista u, basta probar que:

1. Caso base, P([]) se cumple
2. Paso inductivo,  ∀x :: Either Personaje Objeto . ∀xs :: u . P((xs)) => P((x:xs))

Sea u :: Universo, Definimos P(u) := elem o (objetos_en u) ⇒ elem (Right o) u
---------------------------------------------------------------

| Caso base:

Queremos ver que: elem o (objetos_en []) ⇒ elem (Right o) []

Por cómodidad para trabajar, consideremeos
(1): elem o (objetos_en [])
(2): elem (Right o) []
y luego veamos que (1) => (2)

| Empecemos por (1):
elem o (objetos_en [])

Por definición de {OBJETOS_EN}:
= elem o ((map objeto_de . filter es_un_objeto) [])

Por definición de {(.)}:
= elem o ((map objetos_de (filter es_un_objeto [])))

Por definición de {F0}:
= elem o (map objetos_de [])

Por definición de {M0}:
= elem o []

Por definición de {E0}:
= False

| Veamos (2):
elem (Right o) []

Por definición de {E0}:
= False

Luego, juntando las dos expresiones, (1) => (2) se puede escribir cómo:
False    =>    False
y esta implicación es verdadera.

∴ Se cumple el caso base.

| Paso inductivo:

{HI}: elem o (objetos_en xs) ⇒ elem (Right o) xs

Asumiendo la hipotesis inductiva, queremos ver que se cumple: elem o (objetos_en (x:xs)) ⇒ elem (Right o) (x:xs)

Por cómodidad para trabajar, consideremeos
(1): elem o (objetos_en (x:xs))
(2): elem (Right o) (x:xs)
y luego veamos que (1) => (2)

---------------------------------------------------------------
Por extensionalidad para sumas, si x :: Either Persona Objeto entonces:
| ó bien ∃y :: Objeto . x = Right y
| ó bien ∃z :: Persona . x = Left z

Por lo tanto basta probar ambos casos por separado,
Caso A: si ∃y :: Objeto tal que x = Right y entonces vale que:  elem o (objetos_en ((Right y):xs)) => elem (Right o) ((Right y):xs)
and
Caso B: si ∃z :: Persona tal que x = Left z entonces vale que:  elem o (objetos_en ((Left z):xs)) => elem (Right o) ((Left z):xs)
---------------------------------------------------------------

| CASO A:  (∃y :: Objeto tal que x = Right y)

    | Empecemos por (1):
elem o (objetos_en (x:xs))

Como x = Right y, nos queda:
= elem o (objetos_en ((Right y):xs))

Por definición de {(.)}:
= elem o (map objetos_de (filter es_un_objeto ((Right y):xs)))

Por definición de {F1}:
= elem o (map objetos_de (if es_un_objeto (Right y)
                                then ((Right y) : filter es_un_objeto xs)
                                else (filter es_un_objeto xs)))

Por definición de {ES_UN_OBJETO_T}:
= elem o (map objetos_de (if True
                                then ((Right y) : filter es_un_objeto xs)
                                else (filter es_un_objeto xs)))

Luego, como la condición del if se cumple, nos queda:
= elem o (map objetos_de ((Right y) : filter es_un_objeto xs))

Por definición de {M1}:
= elem o ((objeto_de (Right y)) : (map es_un_objeto (filter es_un_objeto xs)))

Por definición de {E1}:
= o == objeto_de (Right y) || elem o (map es_un_objeto (filter es_un_objeto xs))

Por definición de {OBJETOS_DE}
= o == y || elem o (map es_un_objeto (filter es_un_objeto xs)) 

Por definición de {(.)}:
= o == y || elem o ((map es_un_objeto . filter es_un_objeto) xs)

Por definición de {OBJETOS_EN}:
= o == y || elem o (objetos_en xs)

    | Veamos (2):
elem (Right o) (x:xs)

Como x = Right y, nos queda:
elem (Right o) ((Right y):xs)

Por definición de {E1}:
= (Right o) == (Right y) || elem (Right o) xs

--

Luego, juntando las dos expresiones, (1) => (2) se puede escribir cómo:
o == y || elem o (objetos_en xs)    =>    (Right o) == (Right y) || elem (Right o) xs

(*) Veamos que se cumple la implicación, es decir, que si asumimos el antecendente, se cumple el consecuente.

| Supongamos que o == y es verdadero:                       -- Notar que (elem o (objetos_en xs)) esta libre, puede cumplirse o no.
Luego por definición de función matemática, vale que (Right o) == (Right y)
Luego:
True || elem o (objetos_en xs) => True || elem (Right o) xs
True => True
True

| Supongamos que elem o (objetos_en xs) es verdadero:       -- Notar que (o == y) esta libre, puede cumplirse o no.
Luego por HI también es verdadero elem (Right o) xs,
Luego:
o == y || True => (Right o) == (Right y) || True
True => True
True

Por lo tanto, demostramos el CASO A, si ∃y :: Objeto tal que x = Right y entonces la implicación (1) => (2) se cumple.

-----
- (*) Nota: Esta parte de la demostración se podría escribir un poco más formalmente usando explicitamente extensionalidad sobre booleanos primero en (o == y)
-     y luego cuando o!=y hacer de nuevo extensionalidad sobre booleanos en (elem o (objetos_en xs)).
-     Decidimos escribirlo de esa manera para mayor claridad.
-     Si se quisiera justificar explicitando la extensionalidad, se podría hacer de esta manera:
-
-     Dado que o==y es un booleano, por el principio de extensionalidad sobre booleanos basta ver que la implicación vale cuando o==y es verdadero y cuando o==y es falso (es decir que o!=y).
-     Cuando o==y es verdadero vimos que la implicación vale en la demostración anterior.
-     Cuando o==y es falso, tenemos que: False || elem o (objetos_en xs) => (Right o) == (Right y) || elem (Right o) xs
-     y esto es equivalente, por propiedad del {OR} a: elem o (objetos_en xs) => (Right o) == (Right y) || elem (Right o) xs
-     Luego como elem o (objetos_en xs) es un booleano, por principio de extensionalidad sobre booleanos basta ver que la implicación vale cuando elem o (objetos_en xs) es verdadero y cuando elem o (objetos_en xs) es falso.
-     Para el caso elem o (objetos_en xs) verdadero: La demostración de la implicación es casi calcada a la que hicimos antes (no debería ir el o==y, pues estamos en el caso que eso era False).
-     Para el caso elem o (objetos_en xs) falso, la implicación vale trivialmente pues False => (...) = Verdadero.
-     Siguiendo esto, llegariamos a la misma conclusión, el CASO A se cumple.
-----

| CASO B:  (∃z :: Objeto tal que x = Left z)

    | Empecemos por (1):
elem o (objetos_en (x:xs))

Como x = Left z, nos queda:
= elem o (objetos_en ((Left z):xs))

Por definición de {(.)}:
= elem o (map objetos_de (filter es_un_objeto ((Left z):xs)))

Por definición de {F1}:
= elem o (map objetos_de (if es_un_objeto (Left z)
                                then ((Left z) : filter es_un_objeto xs)
                                else (filter es_un_objeto xs)))

Por definición de {ES_UN_OBJETO_F}:
= elem o (map objetos_de (if False
                                then ((Left z) : filter es_un_objeto xs)
                                else (filter es_un_objeto xs)))

Luego, como la condición del if NO se cumple, nos queda:
= elem o (map objetos_de (filter es_un_objeto xs))

Por definición de {(.)}:
= elem o ((map objeto_de . filter es_un_objeto) xs)

Por definición de {OBJETOS_EN}:
= elem o (objetos_en xs)

    | Veamos (2):
elem (Right o) (x:xs)

Como x = Left z, nos queda:
= elem (Right o) ((Left z):xs)

Por definición de {E1}:
= Right o == Left z || elem (Right o) xs

-------
- Resultado intermedio:
- Intuitivamente Right o != Left z, notemos que ambas son de tipo Either Persona Objeto.
- Demostremoslo, para ello basta con encontrar una observación obs :: Either Persona Objeto -> Bool que los distinga.
-
- Sea:
- obs :: Either Persona Objeto -> Bool
- obs = es_un_objeto
-
- Tenemos que:
- obs (Right o) = es_un_objeto (Right o) = True
- obs (Left z) = es_un_objeto (Left z) = False
-
- Por lo tanto, encontramos un ejemplo de una observación que los distingue, Right o != Left z
-------

Luego por lo anterior tenemos que:
= False || elem (Right o) xs

Por propiedad del {||}:
= elem (Right o) xs

--

Luego, juntando las dos expresiones, (1) => (2) se puede escribir cómo:
elem o (objetos_en xs)    =>    elem (Right o) xs

Y eso que nos quedo era justamente nuestra hipotesis inductiva, pues recordemos que {HI}: elem o (objetos_en xs) ⇒ elem (Right o) xs
Vale por hipotesis inductiva.

Por lo tanto, demostramos el CASO B, si ∃z :: Persona tal que x = Left z entonces la implicación (1) => (2) se cumple.

--

Ya demostramos los dos casos que nos presento la extensionalidad en sumas. Vimos que la implicación (1) => (2) se cumple tanto en el caso A, como en el caso B.
∴ Queda probado que se cumple el paso inductivo.

--

Como demostramos el caso base y el paso inductivo,
queda demostrado que:  ∀ u :: Universo . ∀ o :: Objeto . elem o (objetos_en u) ⇒ elem (Right o) u

                                                                                                                                                                ■
